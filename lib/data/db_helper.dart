import 'package:sqflite/sqflite.dart';
import 'package:sqflite_migration_test/data/local_db.dart';
import 'package:sqflite_migration_test/utils/common.dart';

class DbHelper {
  /// Truncate/delete the content of all tables
  Future<void> truncateTables() async {
    final dbClient = await LocalDb.instance.db;
    var tables = await dbClient.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';",
    );
    for (var table in tables) {
      String tableName = table['name'] as String;
      await dbClient.delete(tableName);
    }
  }

  /// Get a list of the names of the columns of a particular table
  Future<List<String>> listColumns(String tableName) async {
    Database db = await LocalDb.instance.db;
    List<Map<String, dynamic>> result = await db.rawQuery(
      "PRAGMA table_info($tableName)",
    );
    List<String> columns = result.map((e) => e['name'] as String).toList();
    return columns;
  }

  /// Get all data from a particular table
  Future<List<Map<String, dynamic>>> fetchTableData(String tableName) async {
    final dbClient = await LocalDb.instance.db;
    return await dbClient.query(tableName);
  }

  /// Insert random values in a particular table
  Future<void> insertRandomRow(String tableName) async {
    final dbClient = await LocalDb.instance.db;
    var columns = await listColumns(tableName);

    //Removing the id column because it will be autogenerated
    columns = columns.where((c) => c != "id").toList();
    Map<String, String> values = {
      for (int i = 0; i < columns.length; i++)
        columns[i]: generateRandomString(4),
    };
    await dbClient.insert(
      tableName,
      values,
      conflictAlgorithm: ConflictAlgorithm.rollback,
    );
  }
}
